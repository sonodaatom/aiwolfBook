package book;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;

//import libsvm.svm;
//import libsvm.svm_model;
//import libsvm.svm_node;
//import libsvm.svm_parameter;
//import libsvm.svm_problem;

public class predict2 {
	/*`svm-predict' Usage
===================

Usage: svm-predict [options] test_file model_file output_file
options:
-b probability_estimates: whether to predict probability estimates, 0 or 1 (default 0); for one-class SVM only 0 is supported

model_file is the model file generated by svm-train.
test_file is the test data you want to predict.
svm-predict will produce output in the output_file.

	 */

	public static void main(String[] args) throws IOException {
//		String string = "1:1 2:2 3:2 4:0 5:1 6:2 7:0 8:6 9:0 10:0 11:7";
//		String[] strArray = open(string);
//
//		int node =11;
//		//モデルのロード
//		svm_model model = svm.svm_load_model("log.model");
//		//判別対象にしたいデータ
//		svm_node[] input = new svm_node[node];
//		for(int i = 0; i<node;i++){
//			input[i]=new svm_node();
//		}
//		//ラベルをセット
//		for(int i = 0; i<node;i++){
//			input[i].index=i+1;
//		}
//
//
//		//値をセット
//		for(int j=0;j<node;j++){
//			input[j].value=Integer.parseInt(strArray[j]);
//		}
//		//判別の実行
//		double v = svm.svm_predict(model, input);
//		System.out.println(v);
		System.out.println(svm()); 
	}
	
	public static double svm() throws IOException{

		String string = "1:1 2:2 3:2 4:0 5:1 6:2 7:0 8:6 9:0 10:0 11:7";
		String[] strArray = open(string);

		int node =11;
		//モデルのロード
		svm_model model = svm.svm_load_model("lib/log.model");
		//判別対象にしたいデータ
		svm_node[] input = new svm_node[node];
		for(int i = 0; i<node;i++){
			input[i]=new svm_node();
		}
		//ラベルをセット
		for(int i = 0; i<node;i++){
			input[i].index=i+1;
		}


		//値をセット
		for(int j=0;j<node;j++){
			input[j].value=Integer.parseInt(strArray[j]);
		}
		//判別の実行
		double v = svm.svm_predict(model, input);
		System.out.println(v);
		return v;

	
	}
	
	private static List<String[]> openFile(File file) throws IOException {
		//System.out.println(file.getAbsolutePath());
		List<String[]> stringList = new ArrayList<String[]>();
		FileReader filereader = new FileReader(file);
		BufferedReader br = new BufferedReader(filereader);
		String str;
		while((str = br.readLine()) != null){
			//System.out.println(str);
			str=str.replace(" 11:", ",");
			str=str.replace("1:", "");//1:を,で置き換え
			str=str.replace(" 2:", ",");//2:を,で置き換え
			str=str.replace(" 3:", ",");
			str=str.replace(" 4:", ",");
			str=str.replace(" 5:", ",");
			str=str.replace(" 6:", ",");
			str=str.replace(" 7:", ",");
			str=str.replace(" 8:", ",");
			str=str.replace(" 9:", ",");
			str=str.replace(" 10:", ",");
			//System.out.println(str);
			stringList.add(str.split(","));
		}
		br.close();
		for(String[] strp : stringList){
			//System.out.println(strp[0]);
		}
		//System.out.println(stringList);
		return stringList;
	}
	private static String[] open(String str) throws IOException {
		String[] stringList;
		str=str.replace(" 11:", ",");
		str=str.replace("1:", "");//1:を,で置き換え
		str=str.replace(" 2:", ",");//2:を,で置き換え
		str=str.replace(" 3:", ",");
		str=str.replace(" 4:", ",");
		str=str.replace(" 5:", ",");
		str=str.replace(" 6:", ",");
		str=str.replace(" 7:", ",");
		str=str.replace(" 8:", ",");
		str=str.replace(" 9:", ",");
		str=str.replace(" 10:", ",");
		stringList=str.split(",");
		return stringList;
	}
}
